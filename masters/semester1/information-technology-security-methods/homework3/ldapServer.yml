---
- hosts: all
  become: yes

  pre_tasks:
  - name: Update apt cache if needed.
    apt: 
      update_cache: yes
      cache_valid_time: 3600

  tasks:

  - name: Ensure dependency packages are installed.
    apt:
      name:
        - python3
        - python3-pip
        - python3-setuptools

        - debconf-utils
        - ldap-utils

        - libsasl2-dev
        - libldap2-dev
        - libssl-dev
      state: present

  - name: Ensure pip dependencies are installed.
    pip:
      name: python-ldap

  - name: Check debconf for slapd entries
    shell: (debconf-get-selections | grep -q -s slapd); echo $?
    register: slapd_debconf
    ignore_errors: yes
    changed_when: false

  - name: Setup unattended installation parameters for OpenLDAP installation.
    debconf:
      name: slapd
      question: "{{ item.key }}"
      vtype: "{{ item.type }}"
      value: "{{ item.value }}"
    with_items:
      - key: slapd/password1
        type: password
        value: password
      - key: slapd/password2
        type: password
        value: password
      - key: slapd/move_old_database
        type: boolean
        value: "true"
      - key: slapd/domain
        type: string
        value: itsm.local
      - key: shared/organization
        type: string
        value: ITSM
      - key: slapd/no_configuration
        type: boolean
        value: "false"
      - key: slapd/purge_database
        type: boolean
        value: "false"
      - key: slapd/allow_ldap_v2
        type: boolean
        value: "false"
      - key: slapd/backend
        type: select
        value: "MDB"
    when: "slapd_debconf.stdout.find('0') == -1"

  - name: Install OpenLDAP.
    apt:
      name: slapd
      state: present

  - name: Start OpenLDAP daemon.
    service: 
      name: slapd
      state: started
      enabled: yes

  - name: Allow OpenLDAP in the firewall.
    ufw:
      rule: allow
      port: ldap

  - name: Allow SSL OpenLDAP in the firewall.
    ufw:
      rule: allow
      port: ldaps

  - name: Install phpLDAPadmin.
    apt:
      name: phpldapadmin
      state: present

  - name: Update phpLDAPadmin configuration.
    replace:
      path: /etc/phpldapadmin/config.php
      regexp: "{{ item.regexp }}"
      replace: "{{ item.replace }}"
    with_items:
      - regexp: "(.*'server','name',)(.*)(\\);)"
        replace: "\\1'ISTM LDAP'\\3"
      - regexp: "(.*'server','base',)(.*)(\\);)"
        replace: "\\1array('dc=itsm,dc=local')\\3"
      - regexp: "^(.*'login','bind_id','.*)"
        replace: "# \\1"

  - name: Create a parent OU entries for users and groups
    community.general.ldap_entry:
      dn: "ou={{ item.name }},dc=itsm,dc=local"
      objectClass: organizationalUnit
      attributes:
        ou: "{{ item.name }}"
      bind_dn: cn=admin,dc=itsm,dc=local
      bind_pw: password
    with_items:
      - name: users
      - name: groups

  - name: Create groups
    community.general.ldap_entry:
      dn: "cn={{ item.cn }},ou=groups,dc=itsm,dc=local"
      objectClass: 
        - posixGroup
        - top
      attributes:
        cn: "{{ item.cn }}"
        gidNumber: "{{ item.gid }}"
      bind_dn: cn=admin,dc=itsm,dc=local
      bind_pw: password
    with_items:
      - cn: user
        gid: 500

  - name: Create users
    community.general.ldap_entry:
      dn: "cn={{ item.cn }},ou=users,dc=itsm,dc=local"
      objectClass: 
        - inetOrgPerson
        - posixAccount
        - top
      attributes:
        cn: "{{ item.cn }}"
        uid: "{{ item.uid }}"
        uidNumber: "{{ item.uidNumber }}"
        gidNumber: "{{ item.gidNumber }}"

        givenName: "{{ item.firstName }}"
        sn: "{{ item.lastName }}"

        userPassword: "{{ item.password }}"

        homeDirectory: "/home/{{ item.uid }}"
        loginShell: "/bin/sh"

      bind_dn: cn=admin,dc=itsm,dc=local
      bind_pw: password
    with_items:
      - cn: Mark Davido
        uid: mdavido
        uidNumber: 1000
        gidNumber: 500
        firstName: Mark
        lastName: Davido
        password: password

  - name: Generate an OpenSSL private key
    openssl_privatekey:
      path: /etc/ssl/private/ldap_server.key

  - name: Generate an OpenSSL Certificate Signing Request
    openssl_csr:
      path: /etc/ssl/private/ldap_server.csr
      privatekey_path: /etc/ssl/private/ldap_server.key
      country_name: LT
      locality_name: Vilnius
      organization_name: VilniusTech
      organizational_unit_name: ITSM
      common_name: ldap.itsm.local
      email_address: aurimas.sakalys@stud.vilniustech.lt

  - name: Generate a Self Signed OpenSSL certificate
    openssl_certificate:
      path: /etc/ssl/private/ldap_server.crt
      privatekey_path: /etc/ssl/private/ldap_server.key
      csr_path: /etc/ssl/private/ldap_server.csr
      provider: selfsigned

  - name: Copy keys and certificates to /etc/ldap/sasl2
    copy:
      src: "{{ item.src }}"
      dest: /etc/ldap/sasl2
      remote_src: yes
    with_items:
      - src: /etc/ssl/private/ldap_server.key
      - src: /etc/ssl/private/ldap_server.crt
      - src: /etc/ssl/certs/ca-certificates.crt
  
  - name: Provide ownership of /etc/ldap/sasl2 to openldap user
    file: 
      dest: /etc/ldap/sasl2
      owner: openldap
      recurse: yes

  - name: Configure TLS certificate locations for LDAP
    community.general.ldap_attrs:
      dn: cn=config
      attributes:
          olcTLSCACertificateFile: /etc/ldap/sasl2/ca-certificates.crt
          olcTLSCertificateFile: /etc/ldap/sasl2/ldap_server.crt
          olcTLSCertificateKeyFile: /etc/ldap/sasl2/ldap_server.key
      state: exact

  - name: Enable SSL LDAP
    replace:
      path: /etc/default/slapd 
      regexp: "{{ item.regexp }}"
      replace: "{{ item.replace }}"
    with_items:
      - regexp: "SLAPD_SERVICES.*"
        replace: 'SLAPD_SERVICES="ldaps:/// ldapi:///"'

  - name: Restart OpenLDAP daemon.
    service: 
      name: slapd
      state: restarted
